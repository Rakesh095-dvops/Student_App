name: CI/CD Pipeline

on:
  #push:
    #branches: [ "main" ]
  #pull_request:
    #branches: [ "main" ]
  release:
    types: [published]

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  run-tests:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Create .env file
        run: |
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "COLLECTION_NAME=${{ secrets.COLLECTION_NAME }}" >> .env
      - name: Run tests
        run: pytest

  build:
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: |
          docker build \
            --build-arg MONGO_URI="${{ secrets.MONGO_URI }}" \
            --build-arg DB_NAME="${{ secrets.DB_NAME }}" \
            --build-arg COLLECTION_NAME="${{ secrets.COLLECTION_NAME }}" \
            -t student_app:latest .

  deploy-staging:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Staging EC2 with Docker Compose
        env:
          HOST: ${{ secrets.STAGING_EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$KEY" > key.pem
          chmod 600 key.pem
          scp -i key.pem -o StrictHostKeyChecking=no docker-compose.yml $USER@$HOST:/path/to/app/
          scp -i key.pem -o StrictHostKeyChecking=no -r . $USER@$HOST:/path/to/app/
          ssh -i key.pem -o StrictHostKeyChecking=no $USER@$HOST '
            cd /path/to/app &&
            docker compose pull &&
            docker compose up -d --build
          '

  deploy-production:
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Production EC2 with Docker Compose
        env:
          HOST: ${{ secrets.PROD_EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "$KEY" > key.pem
          chmod 600 key.pem
          scp -i key.pem -o StrictHostKeyChecking=no docker-compose.yml $USER@$HOST:/path/to/app/
          scp -i key.pem -o StrictHostKeyChecking=no -r . $USER@$HOST:/path/to/app/
          ssh -i key.pem -o StrictHostKeyChecking=no $USER@$HOST '
            cd /path/to/app &&
            docker compose pull &&
            docker compose up -d --build
          '